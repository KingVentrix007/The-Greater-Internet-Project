Spec sheet V1.0
Specs for HTTPE and EDOI protocals

HTTPE- HyperText Transport Protocal Encrypted

EDOI - Encrypted Data Over Internet

HTTPE uses EDOI to encrypt and secure data and server-client connection

POST body data is assumed to be JSON unless specified otherwise(Not yet impmented, only using json ATM)
packet_id cannot be None

-----
HTTPE request look:
VERSION:HTTPE/1.0
METHOD:GET/POST
TYPE:OPTIONAL FIELD. Can be REQ_ENC|GET_RSA|SHARE_AES: PART OF EDOI
ID:OPTIONAL UNLESS TYPE = REQ_ENC, MUST BE RSA ENCRYPTED: PART OF EDOI 
LOCATION:/location
HEADERS:
is_com_setup:true/false
client_id:number/None: Only None when not use EDOI
packet_id:uuid
timestamp:python(datetime.now(timezone.utc).isoformat())
compressions:true/false(not in demo yet, prob lightweight compressions algorthim)
END
[POST DATA]


By defualt. METHOD IS POST duing GET_RSA and SHARE_AES. THis is purly for formatting purpose, and is irrlenvet as GET_RSA and SHARE_AES Do Not access endpoints.
    -Server should Treat TYPE:GET_RSA and TYPE:SHARE_AES seperate to an real post request. They should trigger internal sevrer actions to handle setup, not actions that are triggerd by endpoints. See Demo for details
if type is REQ_ENC
LOCATION+HEADERS+METHOD in AES ENCRYPTED


---Points
ID goes in Pre-header
client_id: goes in header

client_id is technically the excat same value as ID, ID is RSA encrypted. client_id is encrypted in header.

ID MUST BE RSA encrypted. This is because each client has its OWN AES key that the server associates with the ID. meaning, the server must be able to decrypt the ID to know what AES key to us4

------

EDOI:

Step 1. Client asks for RSA key from server(also gets cert and verifies it, using pre-shared key)
Step 2. Sends AES key(RSA encrypted) and user_id(uuidv4) RSA encrypted
Step 3. All requests types should now include TYPE:REQ_ENC, unless endpoint is known to be unencrypted(NOT RECOMMENDED, to be discontinued soon), AND include ID(user_id) RSA encrypted
Step 4. LOCATION/METHOD/HEADERS is now ALL AES_ENCRYPTED. VERSION is not. TYPE is not. ID is RSA encrypted
Step 5. ALL server response to a type REQ_ENC should be AES encrypted(Currenlty not impmented in server demo code)

EDOI v2:

After handshake: EDOI steps 1+2
server sends back AES encypted token(decrypted ID+timestamp+server created ID) in json format
ID is replaced with TOKEN, and the token is encypted with a master AES key on the server. the sevrer checks if it has token id matche sthe svaed id that the server assiged to the cleint id

Recomendations:

client should store the encrypted user id(both client_id and ID) and aes key with the rsa key in a session persistant system, to avoid rencrypting it muiltiple times.
AES key is genertaed by client. server demo uses Fernet.
AES key should never be stored after session end by client.
client must make new id(uuidv4) each session
Client should assume server will clear AES key and id after lease time(not in demo yet), however can send REQ_END(Not impmented in demo code). To terminte connection, server should then remove AES key, and client ID from records
Server endpoints are by defualt in encrypted mode. Only in trusted setups should an endpoint be unencrypted

Requeriments:
no packet_id -> No connection
no timestamp -> No connection
timestamp 2+ min old -> No connection
packet_id is duplicate -> No connection
client_id not in server registry -> No connection
client_id != ID -> No connection